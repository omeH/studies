Список уроков:
01) Работа в командной строке, знакомство с git, pylint. Выбор текстового редактора. 
02) Работа с файлами в Python. Работа с stdin/stdout/stderr в Python.
03) Работа с Python в интерактивном режиме. Ipython. Python как калькулятор.
04) Базовые типы языка Python и их мощь: списки, словари, строки, числа.
05) Именование переменных.
06) Кратенько об алгоритмической сложности. Соотношение теории и практики в коде.
07) Основы ООП. Классы в Python.
08) Наследование, полиморфизм, инкапсуляция в Python.
09) Модули и пакеты в Python.
10) Обработка ошибок. Что такое исключение. Исключения в Python.
11) Итераторы, генераторы в Python.
12) Регулярные выражения в Python, практическое применение(валидация, парсинг текста).
13) Python+SQL. Работа с реляционными СУБД в Python(MySQL, PostgreSQL).
14) Обзор фреймворка django. MVC. Создание простых веб-приложений.
15) Сериализация, десериализация: JSON, YAML, XML, msgpack, etc..
16) Работа с сокетами в Python.
17) Обзор фреймворка Twisted.Создание кэширующего сетевого сервиса.
18) Отладка в Python: отладочная печать, logging, pdb. Научный подход к отладке.
19) Многопоточность в Python. GIL.
20) Порождение процессов в Python. Межпроцессное взаимодействие: виды, примеры, реализация.
21) Тестирование производительности: бенчмарки, микробенчмарки.
22) Профайлинг Python-кода, поиск узких мест производительности.
23) Кодировки, юникод и Python.
24) Принцип работы интерпретатора Python. Модель памяти Python.
25) Написание модуля на C/C++ для Python.

-------------------------------------------------------------------------------
01) Работа в командной строке, знакомство с git, pylint. Выбор текстового редактора. 
Git:
http://githowto.com/ru
http://habrahabr.ru/post/125799/

Pylint:
http://www.pylint.org/
http://docs.pylint.org/run.html

Редакторы:
http://www.sublimetext.com/ - простой, мощный, попсовый, есть на Linux/Windows
http://notepad-plus-plus.org/ - простой, мощный, только на Windows
http://www.vim.org/ - сложный, офигенно мощный, есть везде

Любой другой, если хочешь

Что должно быть достигнуто?
1) Устновлен и настроен git
2) Получены навыки работы с git в командной строке
3) Умение создать репозиторий на github и залить туда свой код
4) Должен быть выбран удобный инструмент редактирования кода
5) Должна быть решена учебная задача
6) Решение должно быть проверено с использованием pylint
7) Должно быть понимание вывода pylint
8) Все баги, найденные pylint, должны быть исправлены
9) Код решенной задачи должен быть залит на github

Опциональные достижения:
1) Навык покрытия простого кода юнит-тестами
2) Разбор параметров командной строки(напрямую через sys.argv)

Задача:
Если выписать все натуральные числа меньше 10, кратные 3 или 5, то получим 3, 5, 6 и 9. Сумма этих чисел - 23.
Найдите сумму всех чисел меньше 10000 кратных 3 или 5.

Требования: 
a) логику суммирования вынести в отдельную функцию
b) функцию потестировать на различных наборах корректных и некорректных данных(можно юнит-тестами, можно просто специльным python-кодом).

-------------------------------------------------------------------------------
02) Работа с файлами в Python. Работа с stdin/stdout/stderr в Python.
Предварительная литература:
http://linuxdoc.ru/stdin-stdout-stderr.html
http://stackoverflow.com/questions/14555402/understanding-stdin-stdout-stderr
http://www.ibm.com/developerworks/ru/library/l-python_part_8/

Что должно быть достигнуто?
1) Понимание, что такое файл и зачем он нужен.
2) Понимание, чем отличается бинарный файл от текстового.
3) Понимание, что такое stdin/stdout/stderr, зачем они нужны и как с ними работать в Python.
4) Навык чтения/записи бинарных файлов на Python.

Задача #1:
Реализовать консольную утилиту для чтения содержимого файлов. Имена файлов должны передаваться как аргументы командной строки. Утилита должна получать от 1 до N таких аргументов, если аргументов нет – читать данные из stdin. Содержимое файлов должно выводиться на stdout. 
Если в процессе работы утилиты возникают ошибки, выводить их нужно на stderr.

Задача #2:
Реализовать консольную утилиту для записи данных в файл. Данные передаются на вход утилите через stdin. Имя выходного файла задаётся первым параметром командной строки. 
Если в процессе работы утилиты возникают ошибки, выводить их нужно на stderr.

-------------------------------------------------------------------------------
03) Работа с Python в интерактином режиме. Ipython. Python как калькулятор.
Предварительная литература:
1) http://habrahabr.ru/post/49428/
2) http://habrahabr.ru/post/49685/
Что должно быть достигнуто?
1) Понимание, зачем нужен интерактивный режим и какие есть бонусы от его использования
2) Поиграться с Python в интерактивном режиме
3) Поиграться с Ipython
Что надо сделать?
Активно прочесть статьи. Все кусочки кода вбить в Python/Ipython в интерактивном режиме. Посмотреть, что будет на выходе Python/Ipython. Понять, зачем нужен этот интерактивный, когда его лучши использовать, а когда нет. Попробовать заюзать Python в качестве калькулятора для решения повседневных задач(опционально, но лично мне он нравится больше, чем гуи-тулзы для тех же целей).

Обзорная, ненапряжная тема.:)

-------------------------------------------------------------------------------
04) Базовые типы языка Python и их мощь: списки, словари, строки, числа.
Предварительная литература:
1) Марк Лутц, главы 5, 7, 8
2) http://habrahabr.ru/post/29980/
3) http://pythlife.blogspot.com/2012/09/blog-post_16.html
Что должно быть достигнуто?
1) Понимание, что такое int в Python и как он обрабатывает большие числа
2) Понимание, что такое строки в Python и как их использовать
3) Понимание, зачем нужны списки и словари в Python и для чего их можно применить
4) Навык работы со строками в Python
5) Навык работы со списками в Python
6) Навык работы со словарями в Python

Задача #1: на большие целые:
Найдите сумму цифр в числе 100!.
n! означает n × (n − 1) × ... × 3 × 2 × 1 Найдите сумму цифр в числе 100!.
Надо написать консольную программку с хелпом и возможностью ввода n через параметр командной строки и выводом результата на stdout.

Задача #2:
Написать скрипт, пробегающий по дереву каталогов и заменяющий во всех файлах одну строку на другую. Предусмотреть возможность фильтрации файлов по суффиксу(расширению). На вход скрипту подаётся 2 параметра: pattern - строка, которую ищем в файле, string_to_replace – строка, на которую меняем найденную строку. Имя каталога задаём через опцию командной строки. Для парсинга опций и параметров командной строки следует использовать argparse.
Обходим текущий каталог по умолчанию.

-------------------------------------------------------------------------------
05) Именование переменных.
Предварительная литература:
1) Стив МакКоннел, Совершенный код, 2-е издание, глава 10 → бегло прочесть, пройти тест на знание данных
2) Стив МакКоннел, Совершенный код, 2-е издание, глава 11 → внимательно прочесть

Что должно быть достигнуто?
1) Понимание, почему важно давать переменным правильные имена
2) Пройден тест на знание данных(в книге).

Задача #1
Пройти по чек-листу главы 11 по переменным в написанных скриптах, найти плохо названные переменные и назвать их понятнее и лучше.

-------------------------------------------------------------------------------
06) Кратко об алгоритмической сложности. Соотношение теории и практики в коде.
Предварительная литература:
1) https://ru.wikipedia.org/wiki/Вычислительная_сложность
2) http://habrahabr.ru/post/104219/
3) https://ru.wikipedia.org/wiki/Компромисс_времени_и_памяти
4) http://www.sorting­algorithms.com/

Что должно быть достигнуто?
1) Базовое понимание сложности алгоритмов.
2) Понимание, что такое компромисс времени и памяти (Space­time trade­off) и в каких задачах что нужно экономить.
3) Научиться на практике оценивать алгоритмическую сложность экспериментальным путем.

Задача #1:
Отсортировать список целых чисел по возрастанию. Реализовать сортировку методом пузырька на python. Сравнить скорость работы своей сортировки и встроенной в Python сортировки на 100, 1000, 10000, 100000, 1.000.000 чисел в списке. Построить графики для визуальной оценки алгоритмической сложности. Входные данные должны быть перемешаны случайным образом.

Задача #2:
Написать 2 функции поиска элементов в списке: линейный поиск и бинарный поиск. Сравнить скорость работы двух реализованных методов поиска на отсортированном массиве целых чисел длины 100, 1000, 10000, 100000, 1.000.000. Провести тот же тест на встроенной в Python list метода index. Ищем каждый раз самый последний элемент списка.

Ремарки к задачам:
1) Каждый тест нужно проводить минимум 5 раз, минимальный и максимальный результат отбрасывать, а для оставшихся значений вычислять среднее значение.
2) Для полученных результатов надо построить графики для визуальной оценки.

-------------------------------------------------------------------------------
07) Основы ООП. Классы в Python (объединен с 08: Наследование, полиморфизм, инкапсуляция в Python).
Предварительная литература:
1) Марк Лутц, главы 25, 26, 27, 28
2) http://habrahabr.ru/post/148015/ 
3) http://habrahabr.ru/post/30444/ 
4) http://habrahabr.ru/post/78055/ 

Задача #1:
Выбрать предметную область, выделить в ней объекты реального мира, подумать, какие атрибуты будут у этих объектов и какое поведение. Нарисовать в виде рисунка, предоставить на проверку. Предметную область лучше согласовать с преподавателем, есть не очень удачные области.
Задача №2:
Создать связный список на Python, который сможет хранить объекты любого типа. Операции:
-append - добавление в хвост списка;
-get - получение последнего элемента списка;
-pop - получение последнего элемента списка с одноврменным его извлечение.
Реализовать итератор для перебора всех элементов списка от начала до конца. Функция len должа возвращать длину списка. Всё в виде класса.
Задача #3 (мини - закрепление понятий полиморфизма, 'утиная типизация'):
Необходимо представить несколько разновидностей уток с использованием классов и объектов. Базовые свойства уток: имя, цвет. Базовое поведение уток: крякают, летают, ходят, плавают. Взять следующие разновидности уток: обычная утка, немая утка, нелетающая утка, обычная утку-альбинос(всегда белого цвета) и нелетающую утку всегда синего цвета. Реализация методов - вывод какой-то понятной по смыслу строки.
Тест: создать пачку уток без всякой рандомизации. Заставь их крякать, летать, плавать и ходить. Сделать это в виде отдельной функции, которая получает на вход список (list) уток, дергает уток за их методы в каком-то порядке и при необходимости перехватывает исключения.
Второе условие: на базе первого решения использовать свой связный список для хранения списка уток. Функция для создания уточной активности не должна при этом измениться.
(Первая реализация демонстрирует полиморфизм, вторая - утиную типизацию)

Ремарки к задаче:
1) Рисовать можно попробовать в gliffy: http://www.gliffy.com/. Для рисования диаграмм классов используются фигурки с вкладки UML 1.0.
2) Немного про UML тож не помешает читануть: http://habrahabr.ru/post/150041/; про редакторы UML: http://habrahabr.ru/post/42812/.

-------------------------------------------------------------------------------
09) Модули и пакеты в Python.
Предварительная литература:
1) Марк Лутц, главы 21, 22, 23
2) http://asvetlov.blogspot.com/2010/05/blog-post.html
3) http://asvetlov.blogspot.com/2010/05/2.html

Упражнения:
Все найденные в литературе примеры кода по возможности нужно проверять в интерактивной сессии командной строки или засовывать в файлы исходников и выполнять. Просто прочитать материал – недостаточно.

Задача #1:
В одной из решенных задач нужно найти общие функции, константы, вынести их в общий модуль, а затем использовать этот модуль для реализации прежней логики. Например: скрипты для чтения и записи в файл в теме про файлы. 
Задача #2:
Разбить большой модуль с объявлениями классов на небольшие модули. Принцип разбиения: схожие по смыслу и роли классы должны лежать в одном модуле. По возможности, объединить некоторые модули в пакеты. Сгруппированные в модуль пакеты должны иметь что-то общее между собой.

-------------------------------------------------------------------------------
10) Обработка ошибок. Что такое исключение. Исключения в Python.
Предварительная литература:
1) Стив МакКоннел, глава 8, Защитное программирование
2) Марк Лутц. главы 32, 33, 34, 35

Что должно быть достигнуто:
1) Знание и понимание общих методы обработки ошибок в программе
2) Понимание, что такое исключение в Python
3) Понимание, зачем нужны исключения и для чего их можно использовать
4) Наработан базовый навык использования исключений на практике

Задача #1 (try/except):
Написать функцию с именем oops, которая при вызове явно возбуждает исключение IndexError. Затем написать вторую функцию,
вызывающую oops внутри инструкции try/except, которая перехватывает ошибку. Затем изменить функцию oops так, чтобы
вместо IndexError она возбуждала исключение KeyError.

Задача #2 (объекты исключений и списки):
Изменить функцию oops так, чтобы она возбуждала собственное исключение (определить исключение в виде класса). Затем
расширить инструкцию try в функции вызова, так чтобы кроме исключения IndexError она перехватывала новое исключение и
выводила перехваченный экземпляр на экран.

Задача #3 (обработка ошибок):
Написать функцию safe(func, *args), которая запускает указанную функцию func, передавая ей произвольное количество
аргументов с использованием синтаксиса *name, перехватывает любые исключения, возникающие в ходе выполнения функции и
выводит информацию об исключении с использованием функции exc_indo из модуля sys:
- с помощью функции safe запустить функцию oops;
- поместить функцию safe в модуль tools.py и передать ей функцию oops в интерактивном режиме;
- расширить функцию safe так, чтобы при возникновении исключения она выводила содержимое стека вызовов с помощьювстроенной функции print_ext, расположенной в стандартном модуле traceback.

-------------------------------------------------------------------------------
11) Итераторы, генераторы в Python.

-------------------------------------------------------------------------------
12) Регулярные выражения в Python, практическое применение (валидация, парсинг текста).
Предварительная литература:
1) http://habrahabr.ru/post/115825/
2) http://habrahabr.ru/post/115436/
3) https://docs.python.org/2/library/re.html

Что должно быть достигнуто:
1) Понимание, что такое регулярные выражения и зачем они нужны
2) Наработаны практические навыки использования регулярных выражений для решения конкретных задач
3) Получен опыт работы с инструментом Tools/scripts/redemo.py из дистрибутива Python для отладки регулярных выражений

Задача #1:
Написать регулярное выражение, которое проверяет на корректность введенные дату и время в формате YYYY-MM-DD HH:mm:SS,
например: 2014-10-08 09:34:17. Сделать функцию в Python-коде, которая получает на вход строку и возвращает True или
False в зависимости от того, соответствует заданная строка шаблону. Покрыть функцию тестами в формате pytest.

Задача #2:
Загрузить файл input_file/data.xml в память. Используя регулярные выражения, достать из XML-файла значения атрибутов
nickname, level и status.

Задача #3:
Разобрать лог веб-сервера nginx input_files/access.log.2.gz с использованием регулярных выражений. Из лога должна быть
получена следующая информация:
- достать IP-адреса посетителей сервера, подсчитать, сколько HTTP-запросов сделано с каждого IP-адреса; вывести
  IP-адреса и количество запросов с них в списке, отсортированном по убыванию;
- достать дату и время запроса из лог-файла; подсчитать, сколько запросов было каждый час; вывести данные на консоль ввиде таблички вида:
  2014-10-06_00: 20
  2014-10-06_01: 22
  2014-10-06_02: 57
  ...

-------------------------------------------------------------------------------
13) Python+SQL. Работа с реляционными СУБД в Python (MySQL, PostgreSQL).
Предварительная литература:
1) http://www.postgresqltutorial.com/what-is-postgresql/
2) http://www.postgresqltutorial.com/install-postgresql/
3) https://help.ubuntu.com/community/PostgreSQL
4) http://www.postgresqltutorial.com/connect-to-postgresql-database/
5) http://zetcode.com/db/postgresqlpythontutorial/

Что должно быть достигнуто:
1) Установлен сервер баз данных PostgreSQL
2) Получены базовые навыки работы с данными с использованием языка SQL и консольного клиента к серверу СУБД
3) Получены базовые навыки работы с данными с использованием GUI-клиента к серверу СУБД
4) Получены базовые навыки работы с данными с использованием Python-клиента к серверу СУБД
5) Получены навыки проектирования и разработки схемы данных для тестового игрового сервера

Задача #1:
Установить PostgreSQL на рабочую машину. Соединиться с СУБД, используя CLI-клиент psql. Создать тестовую базу данных.
Создать произвольную тестовую таблицу, добавить в нее несколько записей, используя CLI-клиент psql.

CREATE TABLE example (
    id INT,
    data VARCHAR(100)
);

Задача #2:
Установить pgadmin3 или какую-либо другую GUI-утилиту для работы с PostgreSQL, добавить, обновить, удалить несколько записей из таблицы example. Добавить несколько произвольных столбцов в таблицу example.

Задача #3:
Установить psycopg2 в virlualenv или в систему. Соединиться с тестовой базой, сделать выборку, обновление, удаление данных из Python-скрипта.

Задача #4:
Спроектировать и разработать схему данных для тестового проекта игрового сервера.