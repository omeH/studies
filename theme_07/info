07) Основы ООП. Классы в Python (объединен с 08: Наследование, полиморфизм, инкапсуляция в Python).

Задача #1:
Выбрать предметную область, выделить в ней объекты реального мира, подумать, какие атрибуты будут у этих объектов и какое поведение. Нарисовать в виде рисунка, предоставить на проверку. Предметную область лучше согласовать с преподавателем, есть не очень удачные области.
Задача №2:
Создать связный список на Python, который сможет хранить объекты любого типа. Операции:
-append - добавление в хвост списка;
-get - получение последнего элемента списка;
-pop - получение последнего элемента списка с одноврменным его извлечение.
Реализовать итератор для перебора всех элементов списка от начала до конца. Функция len должа возвращать длину списка. Всё в виде класса.
Задача #3 (мини - закрепление понятий полиморфизма, 'утиная типизация'):
Необходимо представить несколько разновидностей уток с использованием классов и объектов. Базовые свойства уток: имя, цвет. Базовое поведение уток: крякают, летают, ходят, плавают. Взять следующие разновидности уток: обычная утка, немая утка, нелетающая утка, обычная утку-альбинос(всегда белого цвета) и нелетающую утку всегда синего цвета. Реализация методов - вывод какой-то понятной по смыслу строки.
Тест: создать пачку уток без всякой рандомизации. Заставь их крякать, летать, плавать и ходить. Сделать это в виде отдельной функции, которая получает на вход список (list) уток, дергает уток за их методы в каком-то порядке и при необходимости перехватывает исключения.
Второе условие: на базе первого решения использовать свой связный список для хранения списка уток. Функция для создания уточной активности не должна при этом измениться.
